// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes(title, author_id) VALUES($1, $2)
RETURNING id, uuid, title, author_id
`

type CreateNoteParams struct {
	Title    pgtype.Text `json:"title"`
	AuthorID pgtype.Int4 `json:"author_id"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote, arg.Title, arg.AuthorID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Title,
		&i.AuthorID,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE uuid=$1
`

func (q *Queries) DeleteNote(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteNote, argUuid)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, uuid, title, author_id FROM notes WHERE uuid=$1
`

func (q *Queries) GetNote(ctx context.Context, argUuid uuid.UUID) (Note, error) {
	row := q.db.QueryRow(ctx, getNote, argUuid)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Title,
		&i.AuthorID,
	)
	return i, err
}
